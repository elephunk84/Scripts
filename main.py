#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import tkinter as Tk
from tkinter import ttk, LEFT, RIGHT, CENTER, HORIZONTAL, VERTICAL

from lib.gui.extend_main import *

class UI(Tk.Frame):

    def dateTime(self):
        global dateTimeLIST, yesterday, now
        now=datetime.datetime.now()
        yesterday=datetime.datetime.now() - datetime.timedelta(days=1)
        yesterday=yesterday.strftime("%A %d/%B/%Y %H:%M")
        dateTimeLIST.append(now.strftime("%A"))
        dateTimeLIST.append(now.strftime("%d/%B/%Y"))
        dateTimeLIST.append(str(now.strftime("%H:%M:%S")))
        dateTimeLIST.append(str(now.strftime("%H:%M")))
        dateTimeLIST.append(yesterday)
        dateTimeLIST.append(now.strftime("%d"))
        dateTimeLIST.append(now.strftime("%B"))
        dateTimeLIST.append(now.strftime("%Y"))

    def getDATA(self):
        self.dateTime()
        db=(dbdir+"/"+dateTimeLIST[7]+"/"+dateTimeLIST[6]+"/"+dateTimeLIST[5]+"_datalogger.db")
        with sqlite3.connect(db) as tempconn:
            try:
                curs=tempconn.cursor()
                curs.execute('SELECT * FROM systems ORDER BY ROWID DESC LIMIT 1')
                dbData=curs.fetchone()
                curs.execute('SELECT * FROM heating ORDER BY ROWID DESC LIMIT 1')
                dbData2=curs.fetchone()
            except:
                print("Error Fuckwhitt")
                pass
        return dbData, dbData2

    def getVARS(self):
        self.timer=0
        self.HOSTNAME, self.OS, self.OS_VER, self.OS_Details, self.INTIP, self.EXTIP = get_info()
        self.UPTIME=("System Uptime = "+str(seconds_elapsed()))
        self.dbData, self.dbData2 = self.getDATA()
        for name, fileSystem in FILESYSTEMS.items():
            DiskInfo = get_diskInfo(fileSystem)
            if name == "Local Root":
                self.localHDD.set(DiskInfo)
            if DiskInfo.startswith("/mnt/NFS/Backup"):
                self.PriBackupHDD.set(DiskInfo)
            if DiskInfo.startswith("/mnt/NFS/Storage"):
                self.SecStorageHDD.set(DiskInfo)
            if DiskInfo.startswith("/mnt/NFS/Data"):
                self.PriStorageHDD.set(DiskInfo)
        if self.timer == 0:
            self.STATUStext.set("Central Heating = "+str(self.dbData2[2]))
            self.CTEMPtext.set("Current Temperature = "+str(self.dbData2[0])+"ºC")
            self.STEMPtext.set("Heating Will Come On = "+str(self.dbData2[1])+"ºC")
            self.MOtext.set("Manual Override = "+str(self.dbData2[3]))
            self.AOtext.set("1 Hr Advance = "+str(self.dbData2[4]))
            self.SMtext.set("Summer Mode = "+str(self.dbData2[5]))
            self.MSMtext.set("Manual Summer = "+str(self.dbData2[6]))
            self.HostName.set("Machine Hostname = "+self.HOSTNAME)
            self.OS_Dets.set("OS = "+self.OS_Details)
            self.UpTime.set(self.UPTIME)
            self.IntIP.set("Internal IP = "+self.INTIP)
            self.ExtIP.set("External IP = "+self.EXTIP)
            self.RPI1.set("Raspi-1 = "+str(self.dbData[0]))
            self.RPI2.set("Raspi-2 = "+str(self.dbData[1]))
            self.RPI3.set("Raspi-3 = "+str(self.dbData[2]))
            self.RPI4.set("Raspi-4 = "+str(self.dbData[3]))
            self.RPI5.set("Raspi-5 = "+str(self.dbData[4]))
            self.RPI6.set("Raspi-6 = "+str(self.dbData[5]))
            self.AS.set("AlienSrv = "+str(self.dbData[6]))
            self.GS.set("GigaServ = "+str(self.dbData[7]))
            self.BeastS.set("BeastSrv = "+str(self.dbData[8]))
            self.BackupS.set("BladeSrv = "+str(self.dbData[9]))
            self.lx1.set("ProxySrv = "+str(self.dbData[0]))
            self.lx2.set("Wordpress1 = "+str(self.dbData[1]))
            self.lx3.set("Wordpress2 = "+str(self.dbData[2]))
            self.lx4.set("Email Srv = "+str(self.dbData[3]))
            self.lx5.set("PXE Srv = "+str(self.dbData[4]))
            self.lx6.set("")
            self.lx7.set("")
            self.lx8.set("")
            self.lx9.set("")
            self.lx10.set("")
            self.vm1.set("pFsense = "+str(self.dbData[0]))
            self.vm2.set("TVHeadend = "+str(self.dbData[1]))
            self.vm3.set("Win Desktop = "+str(self.dbData[2]))
            self.vm4.set("Win Server = "+str(self.dbData[3]))
            self.vm5.set("")
            self.vm6.set("")
            self.vm7.set("")
            self.vm8.set("")
            self.vm9.set("")
            self.vm10.set("")
            self.kodiBUILDDate.set("Online Build Date = "+kodiBuildDate)
            self.kodiBUILDVer.set("Online Build Ver = "+kodiBuildVer)
            self.kodiLOCALBUILDVer.set("Local Build Ver = "+kodiLocalBuildVer)
        if timer == 30:
            self.timer=0

    def workerTHREAD(self):
        while True:
            try:
                self.getVARS()
            except:
                sys.exit(0)

    def __init__(self, parent, *args, **kwargs):
        Tk.Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        self.workerTHREAD=threading.Thread(target=self.workerTHREAD)
        self.workerTHREAD.start()
        self.mainUI()

    def mainUI(self):
        universal_height = 600
###SETUP MENUBAR
        menubar = Tk.Menu(self.parent)
        self.parent.config(menu=menubar)
        fileMenu = Tk.Menu(menubar)
        fileMenu.add_command(label="Open", underline=0, command='')
        import_submenu = Tk.Menu(fileMenu)
        import_submenu.add_command(label="New feed")
        import_submenu.add_command(label="Bookmarks")
        import_submenu.add_command(label="Mail")
        fileMenu.add_cascade(label='Import', menu=import_submenu, underline=0)
        fileMenu.add_separator()
        fileMenu.add_command(label="Exit", underline=0, command=lambda : self.quit())
        sshMenu = Tk.Menu(menubar)
        sshMenu_submenu=Tk.Menu(sshMenu)
        sshMenu_submenu.add_command(label="ssh iainstott@alienserver", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh iainstott@beastserver", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh iainstott@gigaserver", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh iainstott@backupserver", underline=0, command='')
        sshMenu_submenu.add_separator()
        sshMenu_submenu.add_command(label="ssh root@alienserver", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh root@beastserver", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh root@gigaserver", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh root@backupserver", underline=0, command='')
        sshMenu_submenu.add_separator()
        sshMenu_submenu.add_command(label="ssh root@raspi1", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh osmc@raspi2", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh iainstott@raspi3", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh iainstott@raspi4", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh root@raspi4", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh iainstott@raspi5", underline=0, command='')
        sshMenu_submenu.add_command(label="ssh osmc@raspi6", underline=0, command='')
        sshMenu.add_cascade(label="SSH Menu", underline=0, menu=sshMenu_submenu)
        sshMenu.add_command(label="Manual Connection", underline=0, command='')
        sshMenu.add_separator()
        sshMenu.add_command(label="SSH Copy ID", underline=0, command='')
        sshMenu.add_command(label="Veiw SHS Key", underline=0, command=lambda:self.GUIShowSSHKey())
        sshMenu.add_command(label="Veiw GPG Key", underline=0, command=lambda:self.GUIShowGPGKey())
        sshMenu.add_command(label="Generate New Keys", underline=0, command='')
        bookmarksMenu = Tk.Menu(menubar)
        bookmarksMenu.add_command(label="BeastServer Proxmox", underline=0, command=lambda : self.openCHROME("https://192.168.0.2:8006/#v1:0:18:4::::::"))
        bookmarksMenu.add_command(label="AlienServer Proxmox", underline=0, command='')
        bookmarksMenu.add_command(label="GigaServer Proxmox", underline=0, command='')
        bookmarksMenu.add_command(label="BackupServer Webmin", underline=0, command='')
        bookmarksMenu.add_separator()
        bookmarksMenu.add_command(label="E-Mail Admin", underline=1, command='')
        bookmarksMenu.add_command(label="MySQL Admin", underline=0, command=lambda : self.EDIT_File(prog_Geany, file_IPTVChannelsNOTFOUND))
        bookmarksMenu.add_command(label="Proxy Admin", underline=0, command=lambda : self.EDIT_File(prog_Geany, file_IPTVChannelList))
        bookmarksMenu.add_command(label="Wordpress Admin", underline=3, command=lambda : self.EDIT_File(prog_Geany, file_IPTVChannelsAvailable))
        AdvancedToolsMenu = Tk.Menu(menubar)
        forensics_submenu=Tk.Menu(AdvancedToolsMenu)
        forensics_submenu.add_command(label="ddrescue", underline=0, command=lambda : self.runCMD('sudo ddrescue', "True"))
        forensics_submenu.add_command(label="testdisk", underline=0, command=lambda : self.runCMD('sudo testdisk', "True"))
        forensics_submenu.add_command(label="photorec", underline=0, command=lambda : self.runCMD('sudo ddrescue', "True"))
        forensics_submenu.add_command(label="extundelete", underline=0, command=lambda : self.runCMD('sudo extundelete', "True"))
        wifitools_submenu=Tk.Menu(AdvancedToolsMenu)
        wifitools_submenu.add_command(label="WiFite", underline=0, command=lambda : self.runCMD('sudo wifite', "True"))
        wifitools_submenu.add_command(label="WiFiPhisher", underline=0, command=lambda : self.runCMD('sudo wifiphisher', "True"))
        defence_submenu=Tk.Menu(AdvancedToolsMenu)
        pentesting_submenu=Tk.Menu(AdvancedToolsMenu)
        hacking_submenu=Tk.Menu(AdvancedToolsMenu)
        cracking_submenu=Tk.Menu(AdvancedToolsMenu)
        AdvancedToolsMenu.add_command(label="String Encoding", underline=0, command=lambda:self.GUIStringEncode())
        AdvancedToolsMenu.add_separator()
        AdvancedToolsMenu.add_command(label="gParted", underline=0, command='')
        AdvancedToolsMenu.add_command(label="fdisk -l", underline=0, command='')
        AdvancedToolsMenu.add_separator()
        AdvancedToolsMenu.add_cascade(label="Forensics Tools", underline=0, menu=forensics_submenu)
        AdvancedToolsMenu.add_cascade(label="WiFi Tools", underline=0, menu=wifitools_submenu)
        AdvancedToolsMenu.add_cascade(label="Defence Tools", underline=0, menu=defence_submenu)
        AdvancedToolsMenu.add_cascade(label="Hacking Tools", underline=0, menu=hacking_submenu)
        AdvancedToolsMenu.add_cascade(label="Cracking Tools", underline=0, menu=cracking_submenu)
        menubar.add_cascade(label="File", underline=0, menu=fileMenu)
        menubar.add_cascade(label="SSH & Keys", underline=0, menu=sshMenu)
        menubar.add_cascade(label="My Bookmarks", underline=0, menu=bookmarksMenu)
        menubar.add_cascade(label="Advanced Tools", underline=0, menu=AdvancedToolsMenu)
###SETUP NOTEBOOK
        self.nb1 = ttk.Notebook(self.parent)
        self.page1_nb1 = ttk.Frame(self.nb1, width= 800,height = universal_height)
        self.page2_nb1 = ttk.Frame(self.nb1,width = 800,height = universal_height)
        self.page3_nb1 = ttk.Frame(self.nb1,width = 800,height = universal_height)
        self.page4_nb1 = ttk.Frame(self.nb1,width = 800,height = universal_height)
        self.page5_nb1 = ttk.Frame(self.nb1,width = 800,height = universal_height)
        self.page6_nb1 = ttk.Frame(self.nb1,width = 800,height = universal_height)
        self.page7_nb1 = ttk.Frame(self.nb1,width = 800,height = universal_height)
        self.nb1.add(self.page1_nb1, text='Landing Page')
        self.nb1.add(self.page2_nb1, text='Local System')
        self.nb1.add(self.page3_nb1, text='Remote Systems')
        self.nb1.add(self.page4_nb1, text='Backup')
        self.nb1.add(self.page5_nb1, text='VPN Hosts')
        self.nb1.add(self.page6_nb1, text='Central Heating')
        self.nb1.add(self.page7_nb1, text='Kodi Tools')
        self.nb1.grid(column=0)
###PAGE 1 - LANDING PAGE
    ####Setup Panes
        self.p1 = ttk.Panedwindow(self.page1_nb1, orient=VERTICAL)
        self.p1_f1 = ttk.Labelframe(self.p1, text='Local System', width=790, height=180)
        self.p1_f2 = ttk.Labelframe(self.p1, text='Network Systems', width=790, height=200)
        self.p1_f3 = ttk.Labelframe(self.p1, text='File Systems', width=790, height=200)
    ####Pane 1 - Quick Links
        self.HostName=Tk.StringVar()
        self.OS_Dets=Tk.StringVar()
        self.UpTime=Tk.StringVar()
        self.IntIP=Tk.StringVar()
        self.ExtIP=Tk.StringVar()
        self.hostnametext=Tk.Label(self.p1_f1, textvariable=self.HostName, font=('helvetica'), justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.hostnametext.pack()
        self.hostnametext.place(x=10, y=10)
        self.osdetstext=Tk.Label(self.p1_f1, textvariable=self.OS_Dets, font=('helvetica'), justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.osdetstext.pack()
        self.osdetstext.place(x=10, y=30)
        self.uptimetext=Tk.Label(self.p1_f1, textvariable=self.UpTime, font=('helvetica'), justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.uptimetext.pack()
        self.uptimetext.place(x=10, y=50)
        self.intiptext=Tk.Label(self.p1_f1, textvariable=self.IntIP, font=('helvetica'), justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.intiptext.pack()
        self.intiptext.place(x=10, y=70)
        self.extiptext=Tk.Label(self.p1_f1, textvariable=self.ExtIP, font=('helvetica'), justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.extiptext.pack()
        self.extiptext.place(x=10, y=90)
        self.p1_b1 =Tk.Button(self.p1_f1, text="Restart", command=lambda : os.popen(cmd_reboot), justify=LEFT, width=10)
        self.p1_b1.pack()
        self.p1_b1.place(x=440, y=5)
        self.p1_b2 =Tk.Button(self.p1_f1, text="Restart KDE", command=lambda : subprocess.Popen(('killall plasmashell'), shell=True), justify=LEFT, width=10)
        self.p1_b2.pack()
        self.p1_b2.place(x=440, y=35)
        self.p1_b3 =Tk.Button(self.p1_f1, text="  Lock ", command=lambda : os.popen(cmd_lock), justify=LEFT, width=10)
        self.p1_b3.pack()
        self.p1_b3.place(x=440, y=65)
        self.p1_b4 =Tk.Button(self.p1_f1, text="ISO Tools", command=lambda:self.GUIIsoTools(), justify=LEFT, width=10)
        self.p1_b4.pack()
        self.p1_b4.place(x=440, y=95)
        self.p1_b5 =Tk.Button(self.p1_f1, text="Iain OS Dev", command=lambda : mountISOMain(), justify=LEFT, width=10)
        self.p1_b5.pack()
        self.p1_b5.place(x=440, y=125)
        self.p1_b6 =Tk.Button(self.p1_f1, text="Install", command=lambda : self.installPrg(), justify=LEFT, width=10)
        self.p1_b6.pack()
        self.p1_b6.place(x=550, y=5)
        self.p1_b7 =Tk.Button(self.p1_f1, text="Root FileMan", command=lambda:os.popen("sudo pcmanfm"), justify=LEFT, width=10)
        self.p1_b7.pack()
        self.p1_b7.place(x=550, y=35)
        self.p1_b8 =Tk.Button(self.p1_f1, text="Octopi", command=lambda : self.runPROG("octopi"), justify=LEFT, width=10)
        self.p1_b8.pack()
        self.p1_b8.place(x=550, y=65)
        self.p1_b9 =Tk.Button(self.p1_f1, text="Manj Settings", command=lambda : self.runPROG(prog_manjsettings), justify=LEFT, width=10)
        self.p1_b9.pack()
        self.p1_b9.place(x=550, y=95)
        self.p1_b10 =Tk.Button(self.p1_f1, text="Yaourt-GUI", command=lambda:self.runCMD(prog_yaourtgui, "True"), justify=LEFT, width=10)
        self.p1_b10.pack()
        self.p1_b10.place(x=550, y=125)
        self.p1_b11 =Tk.Button(self.p1_f1, text="Virt-Manager", command=lambda:self.GUIPrivateMenu(), justify=LEFT, width=10)
        self.p1_b11.pack()
        self.p1_b11.place(x=660, y=5)
        self.p1_b12 =Tk.Button(self.p1_f1, text="Tor", command=lambda:subprocess.call(("tor-browser-en"), shell=False), justify=LEFT, width=10)
        self.p1_b12.pack()
        self.p1_b12.place(x=660, y=35)
        self.p1_b13 =Tk.Button(self.p1_f1, text="Root Htop", command=lambda: self.runCMD("sudo htop", "True"), justify=LEFT, width=10)
        self.p1_b13.pack()
        self.p1_b13.place(x=660, y=65)
        self.p1_b14 =Tk.Button(self.p1_f1, text="Quick VPN", command='', justify=LEFT, width=10)
        self.p1_b14.pack()
        self.p1_b14.place(x=660, y=95)
        self.p1_b15 =Tk.Button(self.p1_f1, text="Home VPN", command='', justify=LEFT, width=10)
        self.p1_b15.pack()
        self.p1_b15.place(x=660, y=125)
        self.p1.add(self.p1_f1)
    ####Pane 2 - Host Status
        self.RPI1=Tk.StringVar()
        self.RPI2=Tk.StringVar()
        self.RPI3=Tk.StringVar()
        self.RPI4=Tk.StringVar()
        self.RPI5=Tk.StringVar()
        self.RPI6=Tk.StringVar()
        self.AS=Tk.StringVar()
        self.GS=Tk.StringVar()
        self.BeastS=Tk.StringVar()
        self.BackupS=Tk.StringVar()
        self.lx1=Tk.StringVar()
        self.lx2=Tk.StringVar()
        self.lx3=Tk.StringVar()
        self.lx4=Tk.StringVar()
        self.lx5=Tk.StringVar()
        self.lx6=Tk.StringVar()
        self.lx7=Tk.StringVar()
        self.lx8=Tk.StringVar()
        self.lx9=Tk.StringVar()
        self.lx10=Tk.StringVar()
        self.vm1=Tk.StringVar()
        self.vm2=Tk.StringVar()
        self.vm3=Tk.StringVar()
        self.vm4=Tk.StringVar()
        self.vm5=Tk.StringVar()
        self.vm6=Tk.StringVar()
        self.vm7=Tk.StringVar()
        self.vm8=Tk.StringVar()
        self.vm9=Tk.StringVar()
        self.vm10=Tk.StringVar()
        self.rpi1text=Tk.Label(self.p1_f2, textvariable=self.RPI1, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.rpi1text.pack()
        self.rpi1text.place(x=139, y=10)
        self.rpi2text=Tk.Label(self.p1_f2, textvariable=self.RPI2, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.rpi2text.pack()
        self.rpi2text.place(x=139, y=25)
        self.rpi3text=Tk.Label(self.p1_f2, textvariable=self.RPI3, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.rpi3text.pack()
        self.rpi3text.place(x=139, y=40)
        self.rpi4text=Tk.Label(self.p1_f2, textvariable=self.RPI4, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.rpi4text.pack()
        self.rpi4text.place(x=139, y=55)
        self.rpi5text=Tk.Label(self.p1_f2, textvariable=self.RPI5, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.rpi5text.pack()
        self.rpi5text.place(x=139, y=70)
        self.rpi6text=Tk.Label(self.p1_f2, textvariable=self.RPI6, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.rpi6text.pack()
        self.rpi6text.place(x=139, y=85)
        self.astext=Tk.Label(self.p1_f2, textvariable=self.AS, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.astext.pack()
        self.astext.place(x=136, y=100)
        self.gstext=Tk.Label(self.p1_f2, textvariable=self.GS, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.gstext.pack()
        self.gstext.place(x=130, y=115)
        self.beaststext=Tk.Label(self.p1_f2, textvariable=self.BeastS, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.beaststext.pack()
        self.beaststext.place(x=130, y=130)
        self.backupstext=Tk.Label(self.p1_f2, textvariable=self.BackupS, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.backupstext.pack()
        self.backupstext.place(x=130, y=145)
        self.cont1text=Tk.Label(self.p1_f2, textvariable=self.lx1, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.cont1text.pack()
        self.cont1text.place(x=339, y=10)
        self.cont2text=Tk.Label(self.p1_f2, textvariable=self.lx2, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.cont2text.pack()
        self.cont2text.place(x=339, y=25)
        self.cont3text=Tk.Label(self.p1_f2, textvariable=self.lx3, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.cont3text.pack()
        self.cont3text.place(x=339, y=40)
        self.cont4text=Tk.Label(self.p1_f2, textvariable=self.lx4, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.cont4text.pack()
        self.cont4text.place(x=339, y=55)
        self.cont5text=Tk.Label(self.p1_f2, textvariable=self.lx5, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.cont5text.pack()
        self.cont5text.place(x=339, y=70)
        self.cont6text=Tk.Label(self.p1_f2, textvariable=self.lx6, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.cont6text.pack()
        self.cont6text.place(x=339, y=85)
        self.cont7text=Tk.Label(self.p1_f2, textvariable=self.lx7, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.cont7text.pack()
        self.cont7text.place(x=336, y=100)
        self.cont8text=Tk.Label(self.p1_f2, textvariable=self.lx8, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.cont8text.pack()
        self.cont8text.place(x=330, y=115)
        self.cont9stext=Tk.Label(self.p1_f2, textvariable=self.lx9, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.cont9stext.pack()
        self.cont9stext.place(x=330, y=130)
        self.cont10text=Tk.Label(self.p1_f2, textvariable=self.lx10, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.cont10text.pack()
        self.cont10text.place(x=330, y=145)
        self.virt1text=Tk.Label(self.p1_f2, textvariable=self.vm1, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.virt1text.pack()
        self.virt1text.place(x=539, y=10)
        self.virt2text=Tk.Label(self.p1_f2, textvariable=self.vm2, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.virt2text.pack()
        self.virt2text.place(x=539, y=25)
        self.virt3text=Tk.Label(self.p1_f2, textvariable=self.vm3, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.virt3text.pack()
        self.virt3text.place(x=539, y=40)
        self.virt4text=Tk.Label(self.p1_f2, textvariable=self.vm4, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.virt4text.pack()
        self.virt4text.place(x=539, y=55)
        self.virt5text=Tk.Label(self.p1_f2, textvariable=self.vm5, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.virt5text.pack()
        self.virt5text.place(x=539, y=70)
        self.virt6text=Tk.Label(self.p1_f2, textvariable=self.vm6, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.virt6text.pack()
        self.virt6text.place(x=539, y=85)
        self.virt7text=Tk.Label(self.p1_f2, textvariable=self.vm7, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.virt7text.pack()
        self.virt7text.place(x=536, y=100)
        self.virt8text=Tk.Label(self.p1_f2, textvariable=self.vm8, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.virt8text.pack()
        self.virt8text.place(x=530, y=115)
        self.virt9text=Tk.Label(self.p1_f2, textvariable=self.vm9, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.virt9text.pack()
        self.virt9text.place(x=530, y=130)
        self.virt10text=Tk.Label(self.p1_f2, textvariable=self.vm10, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.virt10text.pack()
        self.virt10text.place(x=530, y=145)
        self.p1.add(self.p1_f2)
    ####Pane 3 - File Systems
        self.p1.add(self.p1_f3)
        self.localHDD=Tk.StringVar()
        self.PriBackupHDD=Tk.StringVar()
        self.PriStorageHDD=Tk.StringVar()
        self.SecStorageHDD=Tk.StringVar()
        self.localHDDtext=Tk.Label(self.p1_f3, textvariable=self.localHDD, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.localHDDtext.pack()
        self.localHDDtext.place(x=90, y=10)
        self.PriBackupHDDtext=Tk.Label(self.p1_f3, textvariable=self.PriBackupHDD, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.PriBackupHDDtext.pack()
        self.PriBackupHDDtext.place(x=10, y=30)
        self.PriStorageHDDtext=Tk.Label(self.p1_f3, textvariable=self.PriStorageHDD, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.PriStorageHDDtext.pack()
        self.PriStorageHDDtext.place(x=10, y=50)
        self.SecStorageHDDtext=Tk.Label(self.p1_f3, textvariable=self.SecStorageHDD, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.SecStorageHDDtext.pack()
        self.SecStorageHDDtext.place(x=10, y=70)
        self.p1.place(x=5, y=5)
###PAGE 2 - Local System
        self.p2_1 = ttk.Panedwindow(self.page2_nb1, orient=VERTICAL)
        self.p2_1_f1 = ttk.Labelframe(self.p2_1, text='Attached Storage', width=393, height=194)
        self.p2_1_f2 = ttk.Labelframe(self.p2_1, text='Attached Devices', width=393, height=194)
        self.p2_1_f3 = ttk.Labelframe(self.p2_1, text='Network Config', width=393, height=194)
        self.p2_2 = ttk.Panedwindow(self.page2_nb1, orient=VERTICAL)
        self.p2_2_f1 = ttk.Labelframe(self.p2_2, text='Quick App List', width=394, height=294)
        self.p2_2_f2 = ttk.Labelframe(self.p2_2, text='System Apps', width=394, height=294)
        self.p2_1.add(self.p2_1_f1)
        self.p2_1.add(self.p2_1_f2)
        self.p2_1.add(self.p2_1_f3)
        self.p2_2.add(self.p2_2_f1)
        self.p2_2.add(self.p2_2_f2)
        self.p2_1.place(x=5, y=5)
        self.p2_2.place(x=400, y=5)
###PAGE 3 - Remote Systems
        self.p3_1=ttk.PanedWindow(self.page3_nb1, orient=HORIZONTAL)
        self.p3_1_f1 = ttk.Labelframe(self.p3_1, text='System & Services Control', width=550, height=290)
        self.HostList=[]
        for key, value in localHOSTLIST.items():
            self.HostList.append(key)
        self.RemoteSysVariable = Tk.StringVar()
        self.RemoteSysVariable.set("localhost")
        self.RemoteSystemChoice = Tk.OptionMenu(self.p3_1_f1, self.RemoteSysVariable, *self.HostList)
        self.RemoteSystemChoice.config(width=15)
        self.RemoteSystemChoice.pack()
        self.RemoteSystemChoice.place(x=5, y=5)
        self.p3_b1 =Tk.Button(self.p3_1_f1, text="Restart", command=lambda : heatinginput(), justify=LEFT)
        self.p3_b1.pack()
        self.p3_b1.config(width=10)
        self.p3_b1.place(x=175, y=5)
        self.p3_b2 =Tk.Button(self.p3_1_f1, text="Shutdown", command=lambda : heatinginput(), justify=LEFT)
        self.p3_b2.pack()
        self.p3_b2.config(width=10)
        self.p3_b2.place(x=285, y=5)
        self.p3_b3 =Tk.Button(self.p3_1_f1, text="SSH", command=lambda : heatinginput(), justify=LEFT)
        self.p3_b3.pack()
        self.p3_b3.config(width=10)
        self.p3_b3.place(x=395, y=5)
        self.EditDocumentsVariable = Tk.StringVar()
        self.EditDocumentsVariable.set(DOCUMENTSLIST[0])
        self.EditDocumentsChoice = Tk.OptionMenu(self.p3_1_f1, self.EditDocumentsVariable, *DOCUMENTSLIST)
        self.EditDocumentsChoice.config(width=15)
        self.EditDocumentsChoice.pack()
        self.EditDocumentsChoice.place(x=5, y=40)
        self.p3_b4 =Tk.Button(self.p3_1_f1, text="Edit File", command=lambda : heatinginput(), justify=LEFT)
        self.p3_b4.pack()
        self.p3_b4.config(width=10)
        self.p3_b4.place(x=175, y=40)
        self.ServicesChoiceVariable = Tk.StringVar()
        self.ServicesChoiceVariable.set(servicesLIST[0])
        self.ServicesChoiceChoice = Tk.OptionMenu(self.p3_1_f1, self.ServicesChoiceVariable, *servicesLIST)
        self.ServicesChoiceChoice.config(width=15)
        self.ServicesChoiceChoice.pack()
        self.ServicesChoiceChoice.place(x=5, y=75)
        self.ServicesCommandChoiceVariable = Tk.StringVar()
        self.ServicesCommandChoiceVariable.set(servicesCommandLIST[2])
        self.ServicesCommandChoiceChoice = Tk.OptionMenu(self.p3_1_f1, self.ServicesCommandChoiceVariable, *servicesCommandLIST)
        self.ServicesCommandChoiceChoice.config(width=15)
        self.ServicesCommandChoiceChoice.pack()
        self.ServicesCommandChoiceChoice.place(x=175, y=75)
        self.p3_b5 =Tk.Button(self.p3_1_f1, text="Go!", command=lambda : heatinginput(), justify=LEFT)
        self.p3_b5.pack()
        self.p3_b5.config(width=10)
        self.p3_b5.place(x=345, y=75)
        self.p3_2=ttk.PanedWindow(self.page3_nb1, orient=VERTICAL)
        self.p3_2_f2 = ttk.Labelframe(self.p3_2, text='Wake On Lan', width=235, height=155)
        self.p3_b35 =Tk.Button(self.p3_2_f2, text="Wake The Beast", command=lambda : subprocess.call(['wol', '00:24:81:E9:17:8E'], shell=True), justify=LEFT).pack()
        self.p3_2_f3 = ttk.Labelframe(self.p3_2, text='Network Tools', width=235, height=155)
        self.p3_2.add(self.p3_2_f2)
        self.p3_2.add(self.p3_2_f3)
        self.p3_1.add(self.p3_1_f1)
        self.p3_1.add(self.p3_2)
        self.p3_1.place(x=5, y=5)
###PAGE 4 - Backup
###PAGE 5- VPN
        self.p5_1 = ttk.PanedWindow(self.page5_nb1, orient=VERTICAL)
        self.p5_1_f1=ttk.LabelFrame(self.p5_1, text="PIA VPN Tools", width=790, height=285)
        self.VPNHOSTSLIST=Tk.Listbox(self.p5_1_f1, height=10, width=30)
        for host in REGIONLIST:
                self.VPNHOSTSLIST.insert(0, host)
        self.VPNHOSTSLIST.pack()
        self.VPNHOSTSLIST.place(x=10, y=10)
        self.VPNHOSTSLIST2=Tk.Listbox(self.p5_1_f1, height=10, width=30)
        for host in ALLVPNCountries:
                self.VPNHOSTSLIST2.insert(0, host)
        self.VPNHOSTSLIST2.pack()
        self.VPNHOSTSLIST2.place(x=270, y=10)
        self.VPNHOSTSLIST3=Tk.Listbox(self.p5_1_f1, height=10, width=30)
        for host in ALLVPNHosts:
                self.VPNHOSTSLIST3.insert(0, host)
        self.VPNHOSTSLIST3.pack()
        self.VPNHOSTSLIST3.place(x=530, y=10)
        self.p5_b1 =Tk.Button(self.p5_1_f1, text="Generate VPN Configs", command=lambda : subprocess.call(("sudo python /home/iainstott/GitRepo/Scripts/lib/gui/genvpn.py"), shell=True), justify=LEFT)
        self.p5_b1.pack()
        self.p5_b1.place(x=5, y=200)
        self.p5_1_f2=ttk.LabelFrame(self.p5_1, text="Home VPN Tools", width=790, height=185)
        self.p5_2 = ttk.PanedWindow(self.p5_1, orient=HORIZONTAL)
        self.p5_2_f1=ttk.LabelFrame(self.p5_2, text="PIA User Details", width=260, height=100)
        for username, value in UserDETAILS.items():
            if username == "PIAUserDetails":
                PIAUserName=value[0]
                PIAPassWord=value[1]
        self.PIAUsername=Tk.Label(self.p5_2_f1, text="Username = "+STRdecode(PIAUserName), bg=GLOBALBGCOLOR, fg=text_fg)
        self.PIAPassword=Tk.Label(self.p5_2_f1, text="Password = "+STRdecode(PIAPassWord), bg=GLOBALBGCOLOR, fg=text_fg)
        self.PIAUsername.pack()
        self.PIAPassword.pack()
        self.PIAUsername.place(x=10, y=20)
        self.PIAPassword.place(x=10, y=40)
        self.p5_2_f2=ttk.LabelFrame(self.p5_2, text="PIA PPPT User Details", width=260, height=100)
        for username, value in UserDETAILS.items():
            if username == "PPTUserDetails":
                PPTUserName=value[0]
                PPTPassWord=value[1]
        self.PPTUsername=Tk.Label(self.p5_2_f2, text="Username = "+STRdecode(PPTUserName), bg=GLOBALBGCOLOR, fg=text_fg)
        self.PPTPassword=Tk.Label(self.p5_2_f2, text="Password = "+STRdecode(PPTPassWord), bg=GLOBALBGCOLOR, fg=text_fg)
        self.PPTUsername.pack()
        self.PPTPassword.pack()
        self.PPTUsername.place(x=10, y=20)
        self.PPTPassword.place(x=10, y=40)
        self.p5_2_f3=ttk.LabelFrame(self.p5_2, text="Home VPN User Details", width=260, height=100)
        for username, value in UserDETAILS.items():
            if username == "Guest User":
                HomeVPNGuestUsername=value[0]
                HomeVPNGuestPassword=value[1]
        self.HomeUsername=Tk.Label(self.p5_2_f3, text="Username = "+STRdecode(HomeVPNGuestUsername), bg=GLOBALBGCOLOR, fg=text_fg)
        self.HomePassword=Tk.Label(self.p5_2_f3, text="Password = "+STRdecode(HomeVPNGuestPassword), bg=GLOBALBGCOLOR, fg=text_fg)
        self.HomeUsername.pack()
        self.HomePassword.pack()
        self.HomeUsername.place(x=10, y=20)
        self.HomePassword.place(x=10, y=40)
        self.p5_2.add(self.p5_2_f1)
        self.p5_2.add(self.p5_2_f2)
        self.p5_2.add(self.p5_2_f3)
        self.p5_1.add(self.p5_1_f1)
        self.p5_1.add(self.p5_1_f2)
        self.p5_1.add(self.p5_2)
        self.p5_1.place(x=5, y=5)
###PAGE 6 - Heating
        self.p6 = ttk.Panedwindow(self.page6_nb1, orient=VERTICAL)
        self.p6_f1 = ttk.Labelframe(self.p6, text='Info', width=790, height=135)
        self.p6_f2 = ttk.Labelframe(self.p6, text='Temp History', width=790, height=350)
        self.p6_f3 = ttk.Labelframe(self.p6, text='Controls', width=790, height=95)
        self.STATUStext=Tk.StringVar()
        self.CTEMPtext=Tk.StringVar()
        self.STEMPtext=Tk.StringVar()
        self.MOtext=Tk.StringVar()
        self.AOtext=Tk.StringVar()
        self.SMtext=Tk.StringVar()
        self.MSMtext=Tk.StringVar()
        self.chstatustext=Tk.Label(self.p6_f1, textvariable=self.STATUStext, font=title_h, justify=CENTER, fg='green', bg=GLOBALBGCOLOR)
        self.chstatustext.pack()
        self.chstatustext.place(x=255, y=0)
        self.ctemptext=Tk.Label(self.p6_f1, textvariable=self.CTEMPtext, font=h2, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.ctemptext.pack()
        self.ctemptext.place(x=10, y=60)
        self.stemptext=Tk.Label(self.p6_f1, textvariable=self.STEMPtext, font=h2, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.stemptext.pack()
        self.stemptext.place(x=10, y=80)
        self.moemptext=Tk.Label(self.p6_f1, textvariable=self.MOtext, font=h2, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.moemptext.pack()
        self.moemptext.place(x=310, y=60)
        self.aoemptext=Tk.Label(self.p6_f1, textvariable=self.AOtext, font=h2, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.aoemptext.pack()
        self.aoemptext.place(x=340, y=80)
        self.smemptext=Tk.Label(self.p6_f1, textvariable=self.SMtext, font=h2, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.smemptext.pack()
        self.smemptext.place(x=550, y=60)
        self.msmemptext=Tk.Label(self.p6_f1, textvariable=self.MSMtext, font=h2, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.msmemptext.pack()
        self.msmemptext.place(x=550, y=80)
        self.p6_b1 =Tk.Button(self.p6_f3, text="Edit Schedule", command=lambda : heatinginput(), justify=LEFT)
        self.p6_b1.pack()
        self.p6_b1.place(x=5, y=5)
        self.p6_b2 =Tk.Button(self.p6_f3, text="View Templog", command=heatingGraphPage, justify=LEFT)
        self.p6_b2.pack()
        self.p6_b2.place(x=372, y=5)
        self.p6_b3 =Tk.Button(self.p6_f3, text="Start Heating", command=heatingGraphPage, justify=LEFT)
        self.p6_b3.pack()
        self.p6_b3.place(x=264, y=40)
        self.p6_b4 =Tk.Button(self.p6_f3, text="Stop Heating", command=heatingGraphPage, justify=LEFT)
        self.p6_b4.pack()
        self.p6_b4.place(x=376, y=40)
        self.p6_b5 =Tk.Button(self.p6_f3, text="Restart Heating", command=heatingGraphPage, justify=LEFT)
        self.p6_b5.pack()
        self.p6_b5.place(x=486, y=40)
        self.p6.add(self.p6_f1)
        self.p6.add(self.p6_f2)
        self.p6.add(self.p6_f3)
        self.p6.place(x=5, y=5)
###PAGE 7 - Kodi
        self.p7_1 = ttk.Panedwindow(self.page7_nb1, orient=HORIZONTAL)
        self.kodiBUILDVer=Tk.StringVar()
        self.kodiBUILDDate=Tk.StringVar()
        self.kodiLOCALBUILDVer=Tk.StringVar()
    ####Pane 1
        self.p7_1_f1=ttk.LabelFrame(self.p7_1, text="Kodi Details", width=300, height=150)
        self.kodiInfo_label1=Tk.Label(self.p7_1_f1, text=("Installed Kodi Version = "+kodiversion), font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.kodiInfo_label1.pack()
        self.kodiInfo_label1.place(x=5, y=5)
        self.kodiInfo_label2=Tk.Label(self.p7_1_f1, textvariable=self.kodiLOCALBUILDVer, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.kodiInfo_label2.pack()
        self.kodiInfo_label2.place(x=5, y=25)
        self.kodiInfo_label3=Tk.Label(self.p7_1_f1, textvariable=self.kodiBUILDVer, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.kodiInfo_label3.pack()
        self.kodiInfo_label3.place(x=5, y=45)
        self.kodiInfo_label4=Tk.Label(self.p7_1_f1, textvariable=self.kodiBUILDDate, font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.kodiInfo_label4.pack()
        self.kodiInfo_label4.place(x=5, y=65)
        for IPTVusername, IPTVvalue in MyIPTVUSER.items():
            if IPTVusername == "My Account":
                MyIPTVUsername=IPTVvalue[0]
                MyIPTVPassword=IPTVvalue[1]
        self.IPTVUsername=Tk.Label(self.p7_1_f1, text="IPTV Username = "+STRdecode(MyIPTVUsername), bg=GLOBALBGCOLOR, fg=text_fg)
        self.IPTVPassword=Tk.Label(self.p7_1_f1, text="IPTV Password = "+STRdecode(MyIPTVPassword), bg=GLOBALBGCOLOR, fg=text_fg)
        self.IPTVUsername.pack()
        self.IPTVPassword.pack()
        self.IPTVUsername.place(x=5, y=85)
        self.IPTVPassword.place(x=5, y=105)

    ####Pane 2
        self.p7_1_f2=ttk.LabelFrame(self.p7_1, text="Package Details", width=480, height=150)
        self.kodiPACKAGEDetails=Tk.Listbox(self.p7_1_f2, height=7, width=27)
        for package in kodiPackagesDIR:
            if package in kodiIgnore:
                pass
            else:
                self.kodiPACKAGEDetails.insert(0, package)
        self.kodiPACKAGEDetails.pack()
        self.kodiPACKAGEDetails.place(x=10, y=5)
        self.kodiPACKAGEDetails2=Tk.Listbox(self.p7_1_f2, height=7, width=28)
        for package in kodiPackages:
            self.kodiPACKAGEDetails2.insert(0, package)
        self.kodiPACKAGEDetails2.pack()
        self.kodiPACKAGEDetails2.place(x=235, y=5)
        self.p7_2 = ttk.Panedwindow(self.page7_nb1, orient=VERTICAL)
        self.p7_2_f1=ttk.LabelFrame(self.p7_2, text="Build Tools", width=785, height=200)
        self.p7_b11 =Tk.Button(self.p7_2_f1, text="Update TV Guide", command=lambda : self.runCMD("ssh -X iainstott@192.168.0.2 /home/iainstott/tvguide_sh", 'True'), justify=LEFT, width=20)
        self.p7_b11.pack()
        self.p7_b11.place(x=110, y=5)
        self.p7_b12 =Tk.Button(self.p7_2_f1, text="Edit TV Channels", command=lambda : os.popen(prog_Geany+" "+file_IPTVChannelList), justify=LEFT, width=20)
        self.p7_b12.pack()
        self.p7_b12.place(x=110, y=35)
        self.p7_b13 =Tk.Button(self.p7_2_f1, text="Edit webGrab Config", command='', justify=LEFT, width=20)
        self.p7_b13.pack()
        self.p7_b13.place(x=110, y=65)
        self.p7_b21 =Tk.Button(self.p7_2_f1, text="Update Backup", command=lambda : self.runPYTHON3('lib.gui.koditools', 'kodi_CreateBACKUP()'), justify=LEFT, width=20)
        self.p7_b21.pack()
        self.p7_b21.place(x=300, y=5)
        self.p7_b22 =Tk.Button(self.p7_2_f1, text="Update Addons", command=lambda:self.kodi_GUIGenAddons(), justify=LEFT, width=20)
        self.p7_b22.pack()
        self.p7_b22.place(x=300, y=35)
        self.p7_b23 =Tk.Button(self.p7_2_f1, text="Create Build", command=lambda:self.kodi_GUIGenBuild(), justify=LEFT, width=20)
        self.p7_b23.pack()
        self.p7_b23.place(x=300, y=65)
        self.p7_b24 =Tk.Button(self.p7_2_f1, text="Create Reset", command='', justify=LEFT, width=20)
        self.p7_b24.pack()
        self.p7_b24.place(x=300, y=95)
        self.p7_b25 =Tk.Button(self.p7_2_f1, text="Revert to Backup", command='', justify=LEFT, width=20)
        self.p7_b25.pack()
        self.p7_b25.place(x=300, y=125)
        self.p7_b31 =Tk.Button(self.p7_2_f1, text="Sync Local to Remote", command=lambda : self.runPYTHON3('lib.gui.koditools', 'os.system(kodiRsync_Get_IPTVLists); os.system(kodiRsync_LocalToRemote)'), justify=LEFT, width=20)
        self.p7_b31.pack()
        self.p7_b31.place(x=490, y=5)
        self.p7_b32 =Tk.Button(self.p7_2_f1, text="Sync Remote to Local", command=lambda : self.runCMD("rsync -avzP --exclude 'backupFolder' /mnt/NFS/Backup/Iains/KodiRepo/ /home/iainstott/Kodi/", 'True'), justify=LEFT, width=20)
        self.p7_b32.pack()
        self.p7_b32.place(x=490, y=35)
        self.p7_b33 =Tk.Button(self.p7_2_f1, text="CLEAR CURRENT BACKUP", command=lambda : subprocess.call('rm -rf /home/iainstott/Kodi/Archive/currentBackup/*', shell=True), justify=LEFT, width=20)
        self.p7_b33.pack()
        self.p7_b33.place(x=490, y=65)
        self.p7_b33 =Tk.Button(self.p7_2_f1, text="CLEAR CURRENT BUILD", command=lambda : subprocess.call('rm -rf /home/iainstott/Kodi/Archive/currentBuild/*', shell=True), justify=LEFT, width=20)
        self.p7_b33.pack()
        self.p7_b33.place(x=490, y=95)
        self.p7_b33 =Tk.Button(self.p7_2_f1, text="CLEAR .kodi DIR", command=lambda : subprocess.call('rm -rf /home/iainstott/.kodi/*', shell=True), justify=LEFT, width=20)
        self.p7_b33.pack()
        self.p7_b33.place(x=490, y=125)
        self.p7_2_f2=ttk.LabelFrame(self.p7_2, text="IPTV Info", width=785, height=225)
        self.IPTVNotFoundLabel=Tk.Label(self.p7_2_f2, text="TV Channels Not Found", font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.IPTVNotFoundLabel.pack()
        self.IPTVNotFoundLabel.place(x=10, y=15)
        self.IPTVNOTFoundList=Tk.Listbox(self.p7_2_f2, height=10, width=32)
        for notfound in notFound:
            self.IPTVNOTFoundList.insert(0, notfound)
        self.IPTVNOTFoundList.pack()
        self.IPTVNOTFoundList.place(x=10, y=30)
        self.IPTVNotFoundLabel=Tk.Label(self.p7_2_f2, text="TV Channels Available", font=h4, justify=CENTER, fg=text_fg, bg=GLOBALBGCOLOR)
        self.IPTVNotFoundLabel.pack()
        self.IPTVNotFoundLabel.place(x=280, y=15)
        self.IPTVChannelList=Tk.Listbox(self.p7_2_f2, height=10, width=32)
        for channel in channelsAvail:
            self.IPTVChannelList.insert(0, channel)
        self.IPTVChannelList.pack()
        self.IPTVChannelList.place(x=280, y=30)
        self.p7_1.add(self.p7_1_f1)
        self.p7_1.add(self.p7_1_f2)
        self.p7_2.add(self.p7_2_f1)
        self.p7_2.add(self.p7_2_f2)
        self.p7_1.place(x=5, y=5)
        self.p7_2.place(x=5, y=160)

########Leave At End
        self.getVARS()


    def installPrg(self):
        if self.HOSTNAME in IainsLaptop:
            self.OrigOptions=['Pacman', 'sudo pacman -S ', 'Yaourt', 'yaourt -S ']
            self.ArchInstOption=Tk.StringVar()
            self.ArchInstOption.set(self.OrigOptions[0])
            self.installPrgArch_toplevel = Tk.Toplevel()
            self.installPrgArch_toplevel.title("Arch Choice")
            self.installPrgArch_toplevel.geometry('200x100+300+300')
            self.archInstallOption=Tk.OptionMenu(self.installPrgArch_toplevel, self.ArchInstOption, self.OrigOptions[0], self.OrigOptions[2])
            self.archInstallOption.config(width=15)
            self.archInstallOption.pack()
            self.archInstallOption.place(x=20, y=20)
            self.archInstall_Button=Tk.Button(self.installPrgArch_toplevel, text="next", command=lambda :self.installPrg2("Arch"))
            self.archInstall_Button.pack()
            self.archInstall_Button.place(x=60, y=60)
        else:
            self.installcmd="sudo apt-get install -y "
            self.installPrg2(self.installcmd)

    def installPrg2(self, installcmd):
        if installcmd == "Arch":
            self.installPrgArch_toplevel.destroy()
            installtype=self.ArchInstOption.get()
            if installtype == self.OrigOptions[0]:
                installcmd=self.OrigOptions[1]
            if installtype == self.OrigOptions[2]:
                installcmd=self.OrigOptions[3]
        self.installcmd=installcmd
        self.installPrg_toplevel = Toplevel()
        self.installPrg_toplevel.title('Install')
        self.installPrg_toplevel.geometry('200x100+300+300')
        self.InPrg_entry1 = Entry(self.installPrg_toplevel)
        self.InPrg_entry1.pack()
        self.InPrg_entry1.place(x=20, y=30)
        self.InPrg_label1 =Tk.Label(self.installPrg_toplevel, text="Please input Program to install", height=0, width=100)
        self.InPrg_label1.pack()
        self.InPrg_button =Tk.Button(self.installPrg_toplevel, text="Install",  command=lambda :self.install(), justify=LEFT)
        self.InPrg_button.pack()
        self.InPrg_button.place(x=20, y=60)

    def install(self):
        self.program=self.InPrg_entry1.get()
        self.command=self.installcmd+" "+self.program
        self.runCMD(self.command)
        self.installPrg_toplevel.destroy()

    def onExit(self):
        self.quit()

    def writeCOMMAND(self, command):
        with open(commandFILE, 'a') as commandfile:
            commandfile.write(command)

    def editFILE(self, editor, filename):
        os.popen(editor+filename)

    def runPYTHON2(self, filename, module):
        command="konsole -e python2 -c 'import "+filename+"; "+module
        self.writeCOMMAND(command)
        os.popen(command)

    def runPYTHON3(self, filename, module):
        command="konsole -e python3 -c 'from "+filename+" import *; "+module+"'"
        self.writeCOMMAND(command)
        os.popen(command)

    def runCMD(self, command, shellVAR):
        self.writeCOMMAND(command)
        subprocess.call(("konsole -e "+command), shell=shellVAR)

    def runPROG(self, command):
        self.writeCOMMAND(command)
        os.popen(command)

    def kodi_GUIGenAddons(self):
        os.chdir(kodiGitREPO)
        self.KodiGUIWindow=Tk.Toplevel(self.parent)
        self.app=Kodi_GEN_ADDONS(self.KodiGUIWindow)
        self.KodiGUIWindow.geometry('400x300+500+300')
        self.KodiGUIWindow.title('Kodi Tools - Generate Addons')
        self.img = Tk.PhotoImage(file = '/home/iainstott/GitRepo/Scripts/lib/gui/data/images/kodiicon.png')
        self.KodiGUIWindow.tk.call('wm', 'iconphoto', self.KodiGUIWindow._w, self.img)

    def kodi_GUIGenBuild(self):
        os.system(kodiRsync_Backup_Addons)
        os.chdir('/home/iainstott/.kodi/')
        os.system('find . -name \*.zip -delete')
        os.system(kodiRsync_Backup_Current)
        os.system(kodiRsync_Build_Current)
        self.KodiGUIWindow=Tk.Toplevel(self.parent)
        self.app=Kodi_GEN_BUILD(self.KodiGUIWindow)
        self.KodiGUIWindow.geometry('800x400+300+200')
        self.KodiGUIWindow.title('Kodi Tools - Generate Build')
        self.img = Tk.PhotoImage(file = '/home/iainstott/GitRepo/Scripts/lib/gui/data/images/kodiicon.png')
        self.KodiGUIWindow.tk.call('wm', 'iconphoto', self.KodiGUIWindow._w, self.img)

    def GUIStringEncode(self):
        self.StringEncodeWINDOW=Tk.Toplevel(self.parent)
        self.app=STRINGENCODE(self.StringEncodeWINDOW)
        self.StringEncodeWINDOW.geometry('600x200+400+200')
        self.StringEncodeWINDOW.title('Advanced Tools - String Encode & Decode')
        self.img = Tk.PhotoImage(file = '/home/iainstott/GitRepo/Scripts/lib/gui/data/images/encodeicon.png')
        self.StringEncodeWINDOW.tk.call('wm', 'iconphoto', self.StringEncodeWINDOW._w, self.img)

    def GUIIsoTools(self):
        self.IsoToolsWINDOW=Tk.Toplevel(self.parent)
        self.app=ISOTOOLS(self.IsoToolsWINDOW)
        self.IsoToolsWINDOW.geometry('400x200+400+300')
        self.IsoToolsWINDOW.title('System Tools - ISO Utilities')
        self.img = Tk.PhotoImage(file = '/home/iainstott/GitRepo/Scripts/lib/gui/data/images/isoicon.png')
        self.IsoToolsWINDOW.tk.call('wm', 'iconphoto', self.IsoToolsWINDOW._w, self.img)

    def GUIPrivateMenu(self):
        self.PrivateWINDOW=Tk.Toplevel(self.parent)
        self.app=PRIVATE(self.PrivateWINDOW)
        self.PrivateWINDOW.geometry('400x200+400+300')
        self.PrivateWINDOW.title('Advanced Tools - Private Menu')
        self.img = Tk.PhotoImage(file = '/home/iainstott/GitRepo/Scripts/lib/gui/data/images/privateicon.png')
        self.PrivateWINDOW.tk.call('wm', 'iconphoto', self.PrivateWINDOW._w, self.img)

    def GUIShowSSHKey(self):
        self.PopupWINDOW=Tk.Toplevel(self.parent)
        self.app=SSHKEY(self.PopupWINDOW)
        self.PopupWINDOW.geometry('400x200+400+300')
        self.PopupWINDOW.title('SSH Tools - SSH Key')
        self.img = Tk.PhotoImage(file = '/home/iainstott/GitRepo/Scripts/lib/gui/data/images/privateicon.png')
        self.PopupWINDOW.tk.call('wm', 'iconphoto', self.PopupWINDOW._w, self.img)

    def GUIShowGPGKey(self):
        self.PopupWINDOW=Tk.Toplevel(self.parent)
        self.app=GPGKEY(self.PopupWINDOW)
        self.PopupWINDOW.geometry('400x200+400+300')
        self.PopupWINDOW.title('SSH Tools - GPG Key')
        self.img = Tk.PhotoImage(file = '/home/iainstott/GitRepo/Scripts/lib/gui/data/images/privateicon.png')
        self.PopupWINDOW.tk.call('wm', 'iconphoto', self.PopupWINDOW._w, self.img)

def main():
    root = Tk.Tk()
    root.style = ttk.Style()
    root.style.theme_use('clam')
    root.title("Iains Control Panel")
    root.geometry('800x628+300+100')
    img = Tk.PhotoImage(file = icon)
    root.call('wm', 'iconphoto', root, img)
    UI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
